// Gradle script to build/publish Libbulletjme desktop artifacts

plugins {
    id 'application'   // to build JVM applications
    id 'checkstyle'    // to analyze Java sourcecode for style violations
    id 'cpp'           // to compile C/C++ code and link native libraries
    id 'java-library'  // to build JVM libraries
    id 'maven-publish' // to publish artifacts to Maven repositories
    id 'signing'       // to sign artifacts for publication

    alias(libs.plugins.validate.poms) // to verify POMs provide all info required by Maven Central
}

// $artifact and $lbjVersion are set in the gradle.properties file
// or by -P options on the Gradle command line.

ext {
    groupID = 'com.github.stephengold'
    baseName = "${artifact}-${lbjVersion}" // for artifacts
    websiteUrl = 'https://github.com/stephengold/Libbulletjme'
}

sourceSets.main.java {
    srcDir 'src/main/java'
    srcDir 'src/main/native' // for IDE access (no Java there)
}

// Generate all JNI header files before compiling any C/C++ code:
tasks.withType(CppCompile) {
    dependsOn('classes', 'compileTestJava')
}

String javaHome = org.gradle.internal.jvm.Jvm.current().javaHome.absolutePath

model {
    buildTypes {
        Debug   // for development, debugging, and functional testing
        Release // for performance testing and production
    }

    flavors {
        Dp            // double-precision arithmetic
        DpMt          // double-precision arithmetic, multithreaded
        Sp            // single-precision arithmetic
        SpMt          // single-precision arithmetic, multithreaded
        SpMtQuickprof // single-precision arithmetic, multithreaded, Quickprof profiling
        SpQuickprof   // single-precision arithmetic, Quickprof profiling
    }

    platforms {
        // To build native libraries for Android, use "android.gradle" instead.
        Linux64 {
            architecture 'x86_64'
            operatingSystem 'linux'
        }
        Linux_ARM32hf {
            architecture 'armhf'
            operatingSystem 'linux'
        }
        Linux_ARM64 {
            architecture 'aarch64'
            operatingSystem 'linux'
        }
        MacOSX64 {
            architecture 'x86_64'
            operatingSystem 'osx'
        }
        MacOSX_ARM64 {
            architecture 'arm-v8'
            operatingSystem 'osx'
        }
        Windows64 {
            architecture 'x86_64'
            operatingSystem 'windows'
        }
    }

    toolChains { // prioritize the available native toolchains
        if (project.hasProperty('tool')) {
            // set in gradle.properties file or -Ptool= on the command line
            if (project.ext.tool == 'clang') {
                clang(Clang)
            } else if (project.ext.tool == 'gcc') {
                gcc(Gcc)
            } else if (project.ext.tool == 'visualCpp') {
                visualCpp(VisualCpp)
            }
        }

        visualCpp(VisualCpp)
        clang(Clang)
        gcc(Gcc)
        gcc10Arm(Gcc) { // used when cross-compiling on Linux
            target('Linux_ARM64') {
                cppCompiler.executable = 'aarch64-linux-gnu-g++-10'
                linker.executable = 'aarch64-linux-gnu-g++-10'
            }
        }
        gcc9Arm(Gcc) { // used when cross-compiling on Linux
            target('Linux_ARM32hf') {
                cppCompiler.executable = 'arm-linux-gnueabihf-g++-9'
                linker.executable = 'arm-linux-gnueabihf-g++-9'
            }
        }
    }

    components {
        // To build native libraries for Android, use "android.gradle" instead.
        bulletjme(NativeLibrarySpec) {
            targetPlatform 'Linux64'
            targetPlatform 'Linux_ARM32hf'
            targetPlatform 'Linux_ARM64'
            targetPlatform 'MacOSX64'
            targetPlatform 'MacOSX_ARM64'
            targetPlatform 'Windows64'

            sources.cpp.source {
                srcDir 'src/main/native/bullet3'
                srcDir 'src/main/native/glue'
                srcDir 'src/main/native/v-hacd/src'
                include '**/*.cpp'
            }

            binaries.withType(SharedLibraryBinarySpec) {
                String pName = targetPlatform.name
                //println " - $pName  $flavor  $buildType" // to debug this script

                buildable = true
                // Decide whether to build the current type:
                if (buildable && project.hasProperty('bt')) {
                    // set in gradle.properties file or -Pbt= on the command line
                    String btArg = project.ext.bt
                    buildable = (buildType.name == btArg)
                }

                // Decide whether to build the current flavor:
                if (buildable && project.hasProperty('flavor')) {
                    // set in gradle.properties file or -Pflavor= on the command line
                    String flavorArg = project.ext.flavor
                    buildable = (flavor.name == flavorArg)
                }

                // Decide whether to build for the target platform:
                if (buildable && project.hasProperty('target')) {
                    // set in gradle.properties file or -Ptarget= on the command line
                    String targetArg = project.ext.target
                    buildable = (pName == targetArg)
                }
                Boolean isDp = (flavor == flavors.Dp || flavor == flavors.DpMt)
                Boolean isMt = (flavor == flavors.SpMt || flavor == flavors.SpMtQuickprof || flavor == flavors.DpMt)
                Boolean isQuickprof = (flavor == flavors.SpMtQuickprof || flavor == flavors.SpQuickprof)
                String os = targetPlatform.operatingSystem.name

                if (buildable) {
                    if (isMt) {
                        // Skip Mt for MacOSX (Xcode does not support OpenMP) and 32-bit targets
                        buildable = (os != 'osx') && pName.contains('64')
                    }
                    //if (isMt) buildable = false // to skip all multithreaded flavors
                    if (isQuickprof) buildable = false // to skip all Quickprof flavors
                }

                // buildtype-specific preprocessor defines:
                Boolean isDebug = (buildType == buildTypes.Debug)
                if (isDebug) {
                    cppCompiler.define '_DEBUG'
                    //cppCompiler.define 'BT_ADDITIONAL_DEBUG'
                    //cppCompiler.define 'BT_DEBUG_MEMORY_ALLOCATIONS'
                    //cppCompiler.define 'DEBUG_PERSISTENCY'
                    //cppCompiler.define 'VERBOSE_RESIDUAL_PRINTF'
                }

                // flavor-specific preprocessor defines:
                if (isDp) {
                    cppCompiler.define 'BT_USE_DOUBLE_PRECISION'
                }
                if (isMt) {
                    cppCompiler.define 'BT_THREADSAFE'
                    cppCompiler.define 'BT_USE_OPENMP'
                }
                if (isQuickprof) {
                    cppCompiler.define 'BT_ENABLE_PROFILE'
                    //cppCompiler.define 'BT_LINUX_REALTIME'
                }

                String q = pName + flavor.name + buildType.name
                if (toolChain in VisualCpp) {
                    cppCompiler.define 'WIN32'
                    cppCompiler.args '/EHsc' // synchronous exceptions only
                    cppCompiler.args "/I$javaHome/include"
                    cppCompiler.args "/I$javaHome/include/win32"
                    cppCompiler.args "/I$projectDir/src/main/native/bullet3"
                    cppCompiler.args "/I$projectDir/src/main/native/bullet3/BulletDynamics/Featherstone"
                    cppCompiler.args "/I$projectDir/src/main/native/bullet3/LinearMath"
                    cppCompiler.args "/I$projectDir/src/main/native/v-hacd/inc"
                    cppCompiler.args "/I$projectDir/src/main/native/v-hacd/public"
                    linker.args 'ws2_32.lib' // for htons()

                    if (isDebug) {
                        //cppCompiler.args '/FS' // to serialize PDB-file writes
                        cppCompiler.args '/MTd' // to use LIBCMTD
                        //cppCompiler.args '/Zi' // to generate a PDB file containing debug info
                        //cppCompiler.args '/Z7' // to embed debug info in OBJ files
                        linker.args '/DEBUG'
                        if (buildable) {
                            String pdbFile = 'build/libs/bulletjme/shared/'
                            pdbFile += pName + '/debug/'
                            pdbFile += flavor.name + '/bulletjme.pdb'
                        }
                    } else { // buildType == Release
                        cppCompiler.args '/O2'
                        cppCompiler.args '/Ob3'
                    }
                    if (isMt) {
                        cppCompiler.args '/openmp'
                    }

                } else { // toolChain in Clang or Gcc
                    //cppCompiler.args '-v' // to log compiler details
                    //linker.args '-v' // to log linker details

                    cppCompiler.args '-I', "$javaHome/include"
                    cppCompiler.args '-I', "$projectDir/src/main/native/bullet3"
                    cppCompiler.args '-I', "$projectDir/src/main/native/bullet3/BulletDynamics/Featherstone"
                    cppCompiler.args '-I', "$projectDir/src/main/native/bullet3/LinearMath"
                    cppCompiler.args '-I', "$projectDir/src/main/native/v-hacd/inc"
                    cppCompiler.args '-I', "$projectDir/src/main/native/v-hacd/public"
                    cppCompiler.args '-std=c++11'
                    cppCompiler.args '-Werror=return-type'

                    if (isDebug) {
                        cppCompiler.args '-O0', '-g3'
                    } else { // buildType == Release
                        cppCompiler.args '-O3'
                    }
                    if (isMt) {
                        cppCompiler.args '-fopenmp'
                        linker.args '-lgomp'
                    }

                    if (os == 'osx') {
                        cppCompiler.args '-I', "$javaHome/include/darwin"
                    } else if (os == 'linux') {
                        cppCompiler.args '-I', "$javaHome/include/linux"
                        cppCompiler.args '-fPIC'
                        cppCompiler.args '-fvisibility=hidden'
                        linker.args '-fvisibility=hidden'
                    } else if (os == 'windows') {
                        cppCompiler.args '-I', "$javaHome/include"
                        cppCompiler.args '-I', "$javaHome/include/win32"
                    } else {
                        buildable = false
                    }
                }

                if (buildable) {
                    println 'Build ' + q + ' using ' + toolChain

                    // Generate resource path for native library (per jme3-desktop) one of:
                    //   native/linux/arm32/libbulletjme.so
                    //   native/linux/arm64/libbulletjme.so
                    //   native/linux/x86_64/libbulletjme.so
                    //   native/osx/arm64/libbulletjme.dylib
                    //   native/osx/x86_64/libbulletjme.dylib
                    //   native/windows/x86_64/bulletjme.dll

                    String archName = targetPlatform.architecture.name;
                    archName = archName.replaceAll('aarch64', 'arm64')
                    archName = archName.replaceAll('armhf', 'arm32')
                    archName = archName.replaceAll('x86-64', 'x86_64')
                    String replaceWith = 'native/' \
                        + targetPlatform.operatingSystem.name + '/' + archName + '/$1'
                    project.tasks.register('nativesJar' + q, Jar) {
                        archiveBaseName = project.ext.baseName
                        archiveClassifier = flavor.name + buildType.name
                        dependsOn 'bulletjme' + pName + buildType.name + flavor.name + 'SharedLibrary'
                        description = "Creates a JAR of the ${q} native library."
                        from sharedLibraryFile
                        rename '(.+)', replaceWith
                    }

                    Task njTask = project.tasks.named('nativesJar' + q, Jar).get()
                    project.artifacts {
                        archives njTask.archiveFile
                    }
                    project.publishing.publications.maven {
                        artifact njTask
                    }

                } else { // not buildable
                    //println 'Do not build ' + q // to debug this script
                }
            }

            binaries.withType(StaticLibraryBinarySpec) {
                buildable = false
            }
        }
    }
}

dependencies {
    testImplementation(libs.junit4)
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(JavaCompile).configureEach { // Java compile-time options:
    options.compilerArgs << '-Xdiags:verbose'
    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_20)) {
        // Suppress warnings that source value 8 is obsolete.
        options.compilerArgs << '-Xlint:-options'
    }
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true // to provide detailed deprecation warnings
    options.encoding = 'UTF-8'
    options.headerOutputDirectory = new File('src/main/native/glue')
    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_1_10)) {
        options.release = 8
    }
}

// Register test-execution tasks:

application {
    // default settings for the 'run' task:
    mainClass = 'jme3utilities.minie.TestApp'
}
tasks.withType(JavaExec).configureEach { // Java runtime options:
    classpath sourceSets.main.runtimeClasspath
    enableAssertions = true
}
run.dependsOn('assemble')
test.dependsOn('assemble')

// Register style-checking tasks:

checkstyle {
    toolVersion = libs.versions.checkstyle.get()
}
tasks.register('checkstyle') {
    dependsOn 'checkstyleMain', 'checkstyleTest'
    description = 'Checks the style of all Java sourcecode.'
}
checkstyleMain.dependsOn('compileTestJava')

// Register publishing tasks:

tasks.register('install') {
    dependsOn 'publishMavenPublicationToMavenLocal'
    description = 'Installs Maven artifacts to the local repository.'
}
tasks.register('release') {
    dependsOn 'publishMavenPublicationToOSSRHRepository'
    description = 'Stages Maven artifacts to Sonatype OSSRH.'
}

jar {
    archiveBaseName = baseName
    doLast {
        println "using Java ${JavaVersion.current()} (${System.getProperty("java.vendor")})"
    }
    manifest {
        attributes 'Created-By': "${JavaVersion.current()} (${System.getProperty("java.vendor")})"
    }
}

javadoc.dependsOn('compileTestJava')
java.withJavadocJar()
javadocJar { archiveBaseName = baseName }

tasks.register('sourcesJar', Jar) {
    archiveBaseName = baseName
    archiveClassifier = 'sources'
    description = 'Creates a JAR of Java sourcecode.'
    from 'src/main/java' // default is ".allSource", which includes resources
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact sourcesJar
            artifactId = artifact
            from components.java
            groupId = groupID
            pom {
                description = 'a JNI interface to Bullet Physics and V-HACD'
                developers {
                    developer {
                        email = 'sgold@sonic.net'
                        id = 'stephengold'
                        name = 'Stephen Gold'
                    }
                }
                licenses {
                    license {
                        distribution = 'repo'
                        name = 'New BSD (3-clause) License'
                        url = 'https://opensource.org/licenses/BSD-3-Clause'
                    }
                }
                name = groupID + ':' + artifact
                scm {
                    connection = 'scm:git:git://github.com/stephengold/Libbulletjme.git'
                    developerConnection = 'scm:git:ssh://github.com:stephengold/Libbulletjme.git'
                    url = websiteUrl + '/tree/master'
                }
                url = websiteUrl
            }
            version = lbjVersion
        }
    }

    repositories {
        maven { // the staging repo of Sonatype OSSRH

            // Staging to OSSRH relies on the existence of 2 properties
            // (ossrhUsername and ossrhPassword)
            // which should be set in the ~/.gradle/gradle.properties file
            // or by -P options on the command line.

            credentials {
                username = project.hasProperty('ossrhUsername') ? ossrhUsername : 'Unknown user'
                password = project.hasProperty('ossrhPassword') ? ossrhPassword : 'Unknown password'
            }
            name = 'OSSRH'
            url = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2'
        }
    }
}
publishMavenPublicationToMavenLocal.dependsOn('assemble')
publishMavenPublicationToMavenLocal.doLast {
    println 'installed locally as ' + baseName
}

// Register tasks to sign artifacts for publication:

//   Signing relies on the existence of 2 properties
//   (signingKeyEncoded and signingPassword)
//   which should be set in the ~/.gradle/gradle.properties file
//   or by -P options on the command line.

signing {
    def signingKey = base64Decode(findProperty('signingKeyEncoded'))
    def signingPassword = findProperty('signingPassword')
    useInMemoryPgpKeys(signingKey, signingPassword)

    sign configurations.archives
    sign publishing.publications.maven
}
tasks.withType(Sign).configureEach {
    onlyIf { project.hasProperty('signingKeyEncoded') }
}

static def base64Decode(encodedString) {
    if (encodedString != null) {
        byte[] decoded = encodedString.decodeBase64()
        String decode = new String(decoded)
        return decode
    }
    return null
}

// Register cleanup tasks:

clean.dependsOn('cleanLogs')
tasks.register('cleanLogs', Delete) { // JVM crash logs
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}

// Register javadoc-to-(web)site tasks, triggered by push-master.yml:

tasks.register('copyJavadocToSite') {
    dependsOn 'copyMasterJavadocToSite'
}
tasks.register('copyMasterJavadocToSite', Copy) {
    dependsOn 'javadoc'
    from "${buildDir}/docs/javadoc"
    into 'build/site/javadoc/master'
}
